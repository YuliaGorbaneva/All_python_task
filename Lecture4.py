# Функции высшего порядка
# 1. Анонимные, lambda-функции
# 2. Функции map
# 3. Функции filter
# 4. Функции zip
# 5. Функции enumerate
# 6. Файлы
# 7. Модуль os
# 8. Модуль shutil

# def f (x):
#     return x * x
# a = f
# print(a(5))
# print(f(5))
# # переменная "a" хранит в себе ссылку на функцию f


# def calk1(a):
#     return a + a
# def calk2(a):
#     return a * a
# def math(op, x):
#     print(op(x))
# math(calk2, 5)
# # мы передаем в функцию math  функцию и аргумент
# def calk1(a, b):
#     return a + b
# def calk2(a, b):
#     return a * b
# def math(op, x, y):
#     print(op(x, y))
# math(calk1, 5, 45)


# # лямда-функции
# def calk2(a, b):
#     return a * b
# def math(op, x, y):
#     print(op(x, y))
# # calk1 = lambda a, b: a + b
# math(lambda a, b: a + b, 5, 45)

# Задача для самостоятельного решения
# 1. В списке хранятся числа. Нужно выбрать только чётные числа и составить список пар 
# (число; квадрат числа).
# Пример: 1 2 3 5 8 15 23 38
# Получить: [(2, 4), (8, 64), (38, 1444)]
# list_1 = [11,2, 3, 5, 8, 15, 23,38]
# list_2 = list() 
# for i in list_1:
#     if i % 2 == 0:
#         list_2.append((i, i * i))
# print(list_2)
    
# def select(f, col):
#     return[f(x) for x in col]

# def where(f, col):
#     return[x for x in col if f(x)]
# list_1 = [11,2, 3, 5, 8, 15, 23,38]
# list_2 = select(int, list_1)
# print(list_2)
# list_2 = where(lambda x: x % 2 == 0, list_2)
# print(list_2)
# list_2 = list(select(lambda x: (x, x ** 2), list_2))
# print(list_2)

# Функции map - принимает на вход два аргумента - функцию и объект. Наша функция применяет функцию которую мы передаем ко всем элементам нашего объекта и его возвращает
# list_1 = [x for x in range(1, 20)]
# print(list_1)
# list_1 = list(map(lambda x: x + 10, list_1))
# print(list_1)

# data = '15 156 96 3 5 8 52 5'
# print(data)
# # data = data.split()
# # print(data)

# data = list(map(int, data.split()))
# print(data)


# Функции filter - на вход принимает два аргумента - функция и объект - возвращает только те элементы объекта, для которых вызов фукции которую мы передали ыернула значение TRY
# list_1  = [15, 65, 9, 36, 175]
# res = list(filter(lambda x: x % 10 == 5, list_1))
# print(list_1) 
# print(res)


# Функции zip - применяется к набору итерирумых объуктов и возвращает итератор с кортежами из элементов входных данных 
# zip ([1,2,3], ['o', 'd', 't'], ['п','ы','ч'])
# [(1, 'o', 'п'), (2, 'd', 'ы'), (3, 't', 'ч')]
# На выходе получаем набор данных, состоящий из элементов соответствующих исходному набору

# Функции enumerate -  применяется к итерируемому объекту и возвращает новый итератор с кортежами из индекса и элемментов входных данных
# enumerate (['Казань','Смоленск','Рыбки','Чикаго'])
# [(0, 'Казань'), (1, 'Смоленск'), (2, 'Рыбки'), (3, 'Чикаго')]
# Функция поозволяет пронумеровать набор данных

# Файлы
# Файлы в текстовом формате используются для
# * Хранения данных
# * Передачи данныхв клиент-серверных проектах
# * Хранения конфигов
# * Логирования действий
# Что нужно для работы с файлами: 
# 1. Завести переменную,  которая будет связана с этим текстовым фалом
# 2. Указать путь к файлу
# 3. Указать, в каком режиме мы будем работать с файлом

# Варианты рема работы с файлами(мод):
#  а - открытие для добавления данных 
#   * Позволяет дорисывать что-то в имеющийся файл
#   * Если вы попробуете дописать что-то в немуществующий файл, то файл будет создан и внего начнется запись
#  r - открытие для чтения данных
#   * Позволяет читать данные из файла
#   * Если вы  попробуете считать данные из файла, которого не существует, программа выдаст ошибку
#  w - открытие для записи данных
#   * Позволяет записывать данные и создавать файл, если его не существует
#  w+ -
#   * Позволяет открывать файл для записи и читать из него
#   * Если файла не сществует, он будет создан
#  r+ -
#   * Позволяет открывать файл для чтения и дописывать в него
#   * Если файла не существует, программа выдаст ошибку
# colors  = ['red', '9895', 'blue']
# data = open('file.txt', 'a') #здесь указываем режим, в котором будем работать
# data.writelines(colors) #разделителей не будет
# data.close()

# with open('file.txt', 'w') as data:
#     data.write('line 1\n')
#     data.write('line 2\n')
# print(5)
# path = 'file.txt'
# data = open('file.txt', 'r')
# for line in data:
#     print(line)
# data.close()

# Библиотеки
# Модуль OS - представляет собой сножество функций для работы с операционной системой,
# причем ихповедение, как правило, не зависит от ОС, 
# поэтому программы осьаются переносисмыми
# Для того что бы начать работать с данным модулем необходимо его импортировать в свою программу
# import os
# Базовые функции модуля
#   * os.chdir(path) - смена текущей директории
#   * os.getcwd() - текущая рабочая директория
#   * os.path.basename(path) - базовое имя пути
#   * os.path.abspath - возвращает нормализированный абсолютный путь

# Модуль shutil - содержит набор функций высокого уровня для обработки файлов, групп файлов и папок.
# В частности, доступные здесь функции позволяют копировать, перемещать и удалять файлы и папкию
# Часто используется с модулем OS
# import shutil
# shutil.copyfile(src, dst) - копирует содержимое (но не метаданные) файла src в файл dst
# shutil.copy(src, dst) - копирует содержимое файла src в файл или папку dst
# shutil.rmtree(path)  - удаляет текущую диоекторию и все поддиректории; path должен указывать на директорию, а не на символическую ссылку
